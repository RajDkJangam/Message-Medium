
# lodash babel-core babel-loader babel-preset-es2015 babel-preset-react react react-dom react-redux react-router react-router-redux redux redux-thunk webpack



// <IndexRoute component={EventIndexContainer} />
// <Route path="/events/new" component={EventFormContainer} />
// <Route path="/events" component={EventIndexContainer} />
// <Route path="/events/:eventId" component={EventShowContainer} />
// <Route path="/events/:eventId/edit" component={EventFormContainer} />


<img src='assets/missing.png' />

https://medium.com/@joethedave/achieving-ui-animations-with-react-the-right-way-562fa8a91935


console.log('hi');
let elem = document.getElementById('test').innerHTML;
console.log(elem);
 elem.addEventListener('select', function(e) {
 alert('Selection changed! ' + e.currentTarget.value);
 }, false);


from Quill's medium clone:

CSS:

EDIT ON
 * {
  box-sizing: border-box;
}

html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  width: 100%;
}

#editor-container {
  font-family: 'Open Sans', Helvetica, sans-serif;
  font-size: 1.2em;
  height: 100%;
  margin: 0 auto;
  width: 450px;
}
#editor-container .ql-editor {
  min-height: 100%;
  height: inherit;
  overflow-y: inherit;
  padding-bottom: 75px;
}
#editor-container .ql-editor > * {
  margin-top: 1.5em;
}
#editor-container .ql-editor > *:last-child {
  margin-bottom: 50px;
}
#editor-container h1 + p,
#editor-container h2 + p {
  margin-top: 0.5em;
}
#editor-container blockquote {
  border-left: 4px solid #111;
  padding-left: 1em;
}
#editor-container hr {
  border: none;
  color: #111;
  letter-spacing: 1em;
  text-align: center;
}
#editor-container hr:before {
  content: '...';
}

#tooltip-controls {
  background-color: #111;
  border-radius: 4px;
  display: none;
  padding: 5px 10px;
  position: absolute;
}
#tooltip-controls::before {
  box-sizing: border-box;
  border-bottom: 6px solid #111;
  border-left: 6px solid transparent;
  border-right: 6px solid transparent;
  content: ' ';
  display: block;
  height: 6px;
  left: 50%;
  position: absolute;
  margin-left: -6px;
  margin-top: -6px;
  top: 0;
  width: 6px;
}
#tooltip-controls button {
  background-color: transparent;
  color: #fff;
  border: none;
}
#tooltip-controls button.active {
  color: #21b384;
}

#sidebar-controls {
  display: none;
  position: absolute;
}
#sidebar-controls button {
  background-color: transparent;
  border: none;
  padding: 0;
}
#sidebar-controls i.fa {
  background-color: #fff;
  border: 1px solid #111;
  border-radius: 50%;
  color: #111;
  width: 32px;
  height: 32px;
  line-height: 32px;
}
#sidebar-controls .controls {
  display: none;
  margin-left: 15px;
}
#sidebar-controls #show-controls i.fa::before {
  content: "\f067";
}
#sidebar-controls.active .controls {
  display: inline-block;
}
#sidebar-controls.active #show-controls i.fa::before {
  content: "\f00d";
}

button {
  cursor: pointer;
  display: inline-block;
  font-size: 18px;
  padding: 0;
  height: 32px;
  width: 32px;
  text-align: center;
}
button:active, button:focus {
  outline: none;
}

HTML:

<div id="tooltip-controls">
  <button id="bold-button"><i class="fa fa-bold"></i></button>
  <button id="italic-button"><i class="fa fa-italic"></i></button>
  <button id="link-button"><i class="fa fa-link"></i></button>
  <button id="blockquote-button"><i class="fa fa-quote-right"></i></button>
  <button id="header-1-button"><i class="fa fa-header"><sub>1</sub></i></button>
  <button id="header-2-button"><i class="fa fa-header"><sub>2</sub></i></button>
</div>
<div id="sidebar-controls">
  <button id="show-controls"><i class="fa fa-plus"></i></button>
  <span class="controls">
    <button id="image-button"><i class="fa fa-camera"></i></button>
    <button id="video-button"><i class="fa fa-play"></i></button>
    <button id="tweet-button"><i class="fa fa-twitter"></i></button>
    <button id="divider-button"><i class="fa fa-minus"></i></button>
  </span>
</div>
<div id="editor-container">
  <p>Tell your story...</p>
</div>

http://stackoverflow.com/questions/36448800/how-to-show-or-hide-a-menu-when-i-scroll-down-or-up
https://www.abeautifulsite.net/how-to-make-rounded-images-with-css
(use focus and transition to expand and contract the search form?)

https://github.com/zenoamaro/react-quill
https://www.npmjs.com/package/html-to-react
https://www.npmjs.com/package/quilljs-renderer


SVG in React!

Look at this thing!
<br /><br />
<svg height="210" width="500">
  <polygon points="200,10 250,190 160,210" style={{fill:'lime',stroke:'purple',strokeWidth:2}} />
</svg>


From when I was messing around with React HTML formatting:

// let testState = {text: (<div><p>This is a story, there will be all sorts of weird <strong>formatting</strong> things happening.</p><h2>Like headers!</h2><p>And other stuff, like <em>italics!</em></p><blockquote><em>Oh and don't forget blockquotes! We love blockquotes!</em></blockquote><p>Yeah text is cool.</p></div>)};

// <div dangerouslySetInnerHTML={{ __html: this.state.text }} />

// { testState.text }

// let s = this.state.text;
// let htmlObject = document.createElement('div');
// htmlObject.innerHTML = s;
// let objectTwo = htmlObject.firstChild;
// console.log(htmlObject);
// console.log(objectTwo);

// let divTest = ('<div>' + this.state.text + '</div>');


// Hide Header on on scroll down
var didScroll;
var lastScrollTop = 0;
var delta = 5;
var navbarHeight = $('header').outerHeight();

$(window).scroll(function(event){
  didScroll = true;
});

setInterval(function() {
  if (didScroll) {
      hasScrolled();
      didScroll = false;
  }
}, 250);

function hasScrolled() {
  var st = $(this).scrollTop();

  // Make sure they scroll more than delta
  if(Math.abs(lastScrollTop - st) <= delta)
      return;

  // If they scrolled down and are past the navbar, add class .nav-up.
  // This is necessary so you never see what is "behind" the navbar.
  if (st > lastScrollTop && st > navbarHeight){
      // Scroll Down
      $('header').removeClass('nav-down').addClass('nav-up');
  } else {
      // Scroll Up
      if(st + $(window).height() < $(document).height()) {
          $('header').removeClass('nav-up').addClass('nav-down');
      }
  }

  lastScrollTop = st;
}




//     var quill = new Quill('#editor-container', {
//   modules: {
//     toolbar: [
//       [{ header: [1, 2, false] }],
//       ['bold', 'italic', 'underline'],
//       ['image', 'code-block', 'link']
//     ]
//   },
//   placeholder: 'Compose an epic...',
//   theme: 'snow'  // or 'bubble'
// });
// // change the link placeholder to www.github.com
// var tooltip = quill.theme.tooltip;
// var input = tooltip.root.querySelector("input[data-link]");
// input.dataset.link = 'www.github.com';


http://creativedroplets.com/export-svg-for-the-web-with-illustrator-cc/
https://codepen.io/luiscarvalho/pen/hJFrx
https://css-tricks.com/creating-svg-icon-system-react/

https://css-tricks.com/snippets/css/drop-caps/

http://stackoverflow.com/questions/5379120/get-the-highlighted-selected-text
http://stackoverflow.com/questions/8644428/how-to-highlight-text-using-javascript


<svg className="umbrella" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" aria-labelledby="title">
<title id="title">Umbrella Icon</title>
<path d="M27 14h5c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2v0zM27 14c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2v0 14c0 1.112-0.895 2-2 2-1.112 0-2-0.896-2-2.001v-1.494c0-0.291 0.224-0.505 0.5-0.505 0.268 0 0.5 0.226 0.5 0.505v1.505c0 0.547 0.444 0.991 1 0.991 0.552 0 1-0.451 1-0.991v-14.009c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-5.415 6.671-9.825 15-9.995v-1.506c0-0.283 0.224-0.499 0.5-0.499 0.268 0 0.5 0.224 0.5 0.499v1.506c8.329 0.17 15 4.58 15 9.995h-5z"/>
</svg>
<br /><br />

<svg className="umbrella" width="200" height="200" viewBox="0 0 612 792" aria-labelledby="title">
<title id="title">Test Icon</title>
<polygon id="XMLID_1_" points="152.8,292.7 112.6,223 152.8,153.3 233.2,153.3 273.4,223 233.2,292.7 "/>
</svg>


OK here's the junk from the story input page:


var HtmlToReactParser = require('html-to-react').Parser;


// this works! can probably save raw string to db and then parse
// after the fact.
var htmlToReactParser = new HtmlToReactParser();
var reactElement = htmlToReactParser.parse('<div>' + this.state.body + '</div>');

// had to manually escape a quote I think. Or not...
let testStory = '\u003cp\u003eThis story will have \u003cstrong\u003eformatting!\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e\u003cstrong\u003eEveryone loves formatting!!\u003c/strong\u003e\u003c/h3\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eDon\'t they???\u003c/em\u003e\u003c/p\u003e';
let crossesFingers = htmlToReactParser.parse('<div>' + testStory + '</div>');

// $("button.ql-header[value='2']").html("H2!");
$("button.ql-header[value='3']").html("H3!");


IGNORE EVERYTHING BELOW:
<br /><br />
  <div>
    { reactElement }
  </div>
<br /><br /><br /><br />
<div>
  { this.state.body }
</div>
<br /><br /><br /><br />
  { crossesFingers }
<br /><br />


// $("button.ql-header[value='2']").html("H2!");
// $("button.ql-header[value='3']").html("H3!");
// $("button.ql-header[value='3']").html('<svg viewBox="0 0 18 18"> <line class="ql-stroke" x1="3" x2="3" y1="4" y2="14"></line> <line class="ql-stroke" x1="11" x2="11" y1="4" y2="14"></line> <line class="ql-stroke" x1="11" x2="3" y1="9" y2="9"></line> <path class="ql-stroke ql-thin" d="M15.5,14.5h-2c0-.234,1.85-1.076,1.85-2.234a0.959,0.959,0,0,0-1.85-.109"></path> </svg>');
// $("button.ql-header[value='3']").html('<svg viewBox="0 0 10 10"> <polygon id="XMLID_4_" class="ql-stroke" points="6.7,2.9 5.4,3 5.6,2.2 4.1,0.6 1.9,1.1 1.2,3.2 2.8,4.9 3.5,4.7 3.1,5.7 4.7,7.7 7.3,7.4 8.3,4.9 "/></svg>');
